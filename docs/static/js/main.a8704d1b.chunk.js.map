{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/CategoriesList.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","endpoint","encodeURI","fetch","response","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","CategoriesList","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAGVC,mBAAU,IAHA,mBAGxCC,EAHwC,KAG5BC,EAH4B,KAmBhD,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAACS,GAAD,OAAkBP,GAAlB,mBAAiCO,OAChDN,EAAe,OAOf,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAnBa,SAAEP,GACvBF,EAAeE,EAAEQ,OAAOF,Y,uBCRnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEyCC,UAAWH,GAFpD,+DAGII,MAAOF,GAHX,cAGbG,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QATvB,kBAaXL,GAbW,4CAAH,sDCkBLQ,EAhBM,SAAC,GAAqB,IAAnBJ,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAE3B,OACI,yBAAKI,UAAU,0CACX,yBAAKC,IAAML,EAAMM,IAAMP,IACvB,2BAAKA,KCyBFQ,EA5BC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECFN,SAAEA,GAAe,IAAD,EAEZd,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAJ2B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAmBxC,OAZAC,qBAAW,WACPzB,EAASC,GAAWyB,MAAM,SAAAC,GAEtBH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAIlB,CAAErB,IAGEsB,EDf2BK,CAAc3B,GAAlCc,EAFgB,EAEtBP,KAAcc,EAFQ,EAERA,QAEtB,OACI,oCACI,wBAAIJ,UAAU,qCAAd,IAAqDjB,EAArD,KACEqB,GAAW,uBAAGJ,UAAU,oCAAb,gBAEb,yBAAKA,UAAU,aAEPH,EAAOL,KAAK,SAAEC,GAAF,OACR,kBAAC,EAAD,eACIkB,IAAMlB,EAAIC,IACLD,UEClBmB,EAhBQ,SAAC,GAAoB,IAAlBnC,EAAiB,EAAjBA,WACtB,OACI,gCACQA,EAAWe,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI4B,IAAM5B,EACNA,SAAWA,OAJ3B,MCgBO8B,EAlBM,WAAQ,IAAD,EAEc5C,mBAAS,CAAE,cAFzB,mBAEhBQ,EAFgB,KAEJT,EAFI,KAIxB,OACI,oCACI,4CACA,kBAAC,EAAD,CACIA,cAAgBA,IAEpB,6BAEA,kBAAC,EAAD,CAAgBS,WAAaA,M,MCTzCqC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.a8704d1b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n\r\n    const [ inputValue, setInputValue ] = useState( '' );\r\n\r\n    const handleInputChange= ( e ) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ) {\r\n            setCategories( (categories) => [ inputValue, ...categories ] );\r\n            setInputValue( '' );\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type='text'\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n             />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async( category ) => {\r\n\r\n    const endpoint = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=kPvDjYRSfXW7YDooLoN10zYQfUED6Gxr`;\r\n    const response = await fetch( endpoint );\r\n    const { data } = await response.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    \r\n    return  gifs ;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GifGridItem =  ({ title, url })  => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n         \r\n    )\r\n}\r\n\r\n GifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n }\r\n\r\nexport default GifGridItem\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'> { category } </h3>\r\n            { loading && <p className='animate__animated animate__flash'> Loading... </p> }\r\n                \r\n            <div className='card-grid'>\r\n                { \r\n                    images.map( ( img ) => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img } \r\n                        />\r\n                    ) ) \r\n                } \r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [ state, setState ] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    useEffect( () => {\r\n        getGifs( category ).then( imgs => {\r\n        //    setTimeout(() => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            }); \r\n        //    }, 5000);\r\n        });\r\n    }, [ category ]); // el arreglo vacio es para que solo se ejecute una vez\r\n    \r\n\r\n    return state; // { data:[], loading: true };\r\n\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GifGrid from './GifGrid';\r\n\r\nconst CategoriesList = ({ categories }) => {\r\n    return (\r\n        <ol> {\r\n                categories.map( category => (\r\n                    <GifGrid \r\n                        key={ category } \r\n                        category={ category } \r\n                    />\r\n                ) )\r\n        } </ol>\r\n    )\r\n}\r\nCategoriesList.propTypes = {\r\n    categories: PropTypes.array.isRequired\r\n}\r\n\r\nexport default CategoriesList\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport CategoriesList from './components/CategoriesList';\r\n\r\nconst GifExpertApp = ( ) => {\r\n\r\n    const [ categories, setCategories ] = useState([ 'One Punch' ]);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory \r\n                setCategories={ setCategories }  \r\n            />\r\n            <hr />\r\n\r\n            <CategoriesList categories={ categories } />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}